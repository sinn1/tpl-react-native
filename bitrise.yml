---
format_version: '8'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: react-native
trigger_map:
- push_branch: '*'
  workflow: primary
- pull_request_source_branch: '*'
  workflow: primary
workflows:
  primary:
    steps:
    - npm@1:
        inputs:
        - command: install
    - npm@1:
        inputs:
        - command: test
    - deploy-to-bitrise-io@1: {}
    before_run:
    - _prepare
  deploy-android:
    description: >
      ## Configure Android part of the deploy workflow


      To generate a signed APK:


      1. Open the **Workflow** tab of your project on Bitrise.io

      1. Add **Sign APK step right after Android Build step**

      1. Click on **Code Signing** tab

      1. Find the **ANDROID KEYSTORE FILE** section

      1. Click or drop your file on the upload file field

      1. Fill the displayed 3 input fields:

      1. **Keystore password**

      1. **Keystore alias**

      1. **Private key password**

      1. Click on **[Save metadata]** button


      That's it! From now on, **Sign APK** step will receive your uploaded
      files.


      ## Configure iOS part of the deploy workflow


      To generate IPA:


      1. Open the **Workflow** tab of your project on Bitrise.io

      1. Click on **Code Signing** tab

      1. Find the **PROVISIONING PROFILE** section

      1. Click or drop your file on the upload file field

      1. Find the **CODE SIGNING IDENTITY** section

      1. Click or drop your file on the upload file field

      1. Click on **Workflows** tab

      1. Select deploy workflow

      1. Select **Xcode Archive & Export for iOS** step

      1. Open **Force Build Settings** input group

      1. Specify codesign settings

      Set **Force code signing with Development Team**, **Force code signing
      with Code Signing Identity**  

      and **Force code signing with Provisioning Profile** inputs regarding to
      the uploaded codesigning files

      1. Specify manual codesign style

      If the codesigning files, are generated manually on the Apple Developer
      Portal,  

      you need to explicitly specify to use manual coedsign settings  

      (as ejected rn projects have xcode managed codesigning turned on).  

      To do so, add 'CODE_SIGN_STYLE="Manual"' to 'Additional options for
      xcodebuild call' input


      ## To run this workflow


      If you want to run this workflow manually:


      1. Open the app's build list page

      2. Click on **[Start/Schedule a Build]** button

      3. Select **deploy** in **Workflow** dropdown input

      4. Click **[Start Build]** button


      Or if you need this workflow to be started by a GIT event:


      1. Click on **Triggers** tab

      2. Setup your desired event (push/tag/pull) and select **deploy** workflow

      3. Click on **[Done]** and then **[Save]** buttons


      The next change in your repository that matches any of your trigger map
      event will start **deploy** workflow.
    steps:
    - install-missing-android-tools@2:
        inputs:
        - gradlew_path: $ANDROID_PROJECT_PATH/gradlew
    - change-android-versioncode-and-versionname@1:
        inputs:
        - build_gradle_path: $ANDROID_PROJECT_PATH/app/build.gradle
    - android-build@0:
        inputs:
        - module: app
        - variant: release
        - build_type: aab
        - project_location: $ANDROID_PROJECT_PATH
    - deploy-to-bitrise-io@1: {}
    meta:
      bitrise.io:
        stack: linux-docker-android-lts
    before_run:
    - _prepare
    envs:
    - opts:
        is_expand: false
      API_URL: 'https://mdd-672af165ba032f17-dev.nw.r.appspot.com/graphql'
  deploy-ios:
    description: Build and deploy ios
    steps:
    - cocoapods-install@2: {}
    - set-xcode-build-number@1:
        inputs:
        - plist_path: $BITRISE_SOURCE_DIR/ios/MyDogDoc/Info.plist
    - ios-auto-provision@1:
        inputs:
        - team_id: $APPLE_DEVELOPER_TEAM_ID
        - configuration: Release
        - generate_profiles: 'yes'
        - distribution_type: ad-hoc
    - xcode-archive@3:
        inputs:
        - project_path: $IOS_PROJECT_PATH
        - scheme: $IOS_SCHEME
        - export_method: ad-hoc
        - team_id: $APPLE_DEVELOPER_TEAM_ID
        - configuration: Release
    - deploy-to-bitrise-io@1: {}
    before_run:
    - _prepare
    envs:
    - opts:
        is_expand: false
      API_URL: 'https://mdd-672af165ba032f17-dev.nw.r.appspot.com/graphql'
  _prepare:
    description: |-
      Prepare machine for a build
      - clone repo
      - install npm modules
      - create .env file
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@5: {}
    - npm@1:
        inputs:
        - cache_local_deps: 'true'
        - command: install
        title: Run npm install
    - script@1:
        inputs:
        - content: >-
            #!/usr/bin/env bash

            # fail if any commands fails

            set -e

            # debug log

            set -x


            # write your script here


            cat $BITRISE_SOURCE_DIR/.env


            # or run a script from your repository, like:

            # bash ./path/to/script.sh

            # not just bash, e.g.:

            # ruby ./path/to/script.rb
        title: Create .env file
  deploy-ios-stage:
    description: ''
    steps:
    - cocoapods-install@2: {}
    - set-xcode-build-number@1:
        inputs:
        - plist_path: $BITRISE_SOURCE_DIR/ios/MyDogDoc/Info.plist
    - ios-auto-provision@1:
        inputs:
        - team_id: $APPLE_DEVELOPER_TEAM_ID
        - project_path: $IOS_PROJECT_PATH
        - scheme: $IOS_SCHEME
        - configuration: Release
        - distribution_type: app-store
    - xcode-archive@3:
        inputs:
        - project_path: $IOS_PROJECT_PATH
        - scheme: $IOS_SCHEME
        - force_team_id: ''
        - force_code_sign_identity: ''
        - force_provisioning_profile_specifier: ''
        - force_provisioning_profile: ''
        - team_id: $APPLE_DEVELOPER_TEAM_ID
        - export_method: app-store
        - configuration: ''
    - deploy-to-itunesconnect-deliver@2:
        inputs:
        - bundle_id: $IOS_BUNDLE_ID
    before_run:
    - _prepare
    envs:
    - opts:
        is_expand: false
      API_URL: 'https://mdd-672af165ba032f17-dev.nw.r.appspot.com/graphql'
  deploy-android-stage:
    description: >
      ## Configure Android part of the deploy workflow


      To generate a signed APK:


      1. Open the **Workflow** tab of your project on Bitrise.io

      1. Add **Sign APK step right after Android Build step**

      1. Click on **Code Signing** tab

      1. Find the **ANDROID KEYSTORE FILE** section

      1. Click or drop your file on the upload file field

      1. Fill the displayed 3 input fields:

      1. **Keystore password**

      1. **Keystore alias**

      1. **Private key password**

      1. Click on **[Save metadata]** button


      That's it! From now on, **Sign APK** step will receive your uploaded
      files.


      ## Configure iOS part of the deploy workflow


      To generate IPA:


      1. Open the **Workflow** tab of your project on Bitrise.io

      1. Click on **Code Signing** tab

      1. Find the **PROVISIONING PROFILE** section

      1. Click or drop your file on the upload file field

      1. Find the **CODE SIGNING IDENTITY** section

      1. Click or drop your file on the upload file field

      1. Click on **Workflows** tab

      1. Select deploy workflow

      1. Select **Xcode Archive & Export for iOS** step

      1. Open **Force Build Settings** input group

      1. Specify codesign settings

      Set **Force code signing with Development Team**, **Force code signing
      with Code Signing Identity**  

      and **Force code signing with Provisioning Profile** inputs regarding to
      the uploaded codesigning files

      1. Specify manual codesign style

      If the codesigning files, are generated manually on the Apple Developer
      Portal,  

      you need to explicitly specify to use manual coedsign settings  

      (as ejected rn projects have xcode managed codesigning turned on).  

      To do so, add 'CODE_SIGN_STYLE="Manual"' to 'Additional options for
      xcodebuild call' input


      ## To run this workflow


      If you want to run this workflow manually:


      1. Open the app's build list page

      2. Click on **[Start/Schedule a Build]** button

      3. Select **deploy** in **Workflow** dropdown input

      4. Click **[Start Build]** button


      Or if you need this workflow to be started by a GIT event:


      1. Click on **Triggers** tab

      2. Setup your desired event (push/tag/pull) and select **deploy** workflow

      3. Click on **[Done]** and then **[Save]** buttons


      The next change in your repository that matches any of your trigger map
      event will start **deploy** workflow.
    steps:
    - install-missing-android-tools@2:
        inputs:
        - gradlew_path: $ANDROID_PROJECT_PATH/gradlew
    - change-android-versioncode-and-versionname@1:
        inputs:
        - build_gradle_path: $ANDROID_PROJECT_PATH/app/build.gradle
    - android-build@0:
        inputs:
        - module: app
        - variant: release
        - project_location: $ANDROID_PROJECT_PATH
    - sign-apk@1: {}
    - google-play-deploy@3:
        inputs:
        - package_name: $ANDROID_PACKAGE_NAME
        - service_account_json_key_path: $BITRISEIO_ANDROID_SERVICE_ACCOUNT_JSON_KEY_URL_URL
    envs:
    - opts:
        is_expand: false
      API_URL: 'https://mdd-672af165ba032f17-dev.nw.r.appspot.com/graphql'
    before_run:
    - _prepare
app:
  envs:
  - opts:
      is_expand: false
    ANDROID_PROJECT_PATH: android
  - opts:
      is_expand: false
    IOS_PROJECT_PATH: ios/TemplateApp.xcworkspace
  - opts:
      is_expand: false
    IOS_SCHEME: TemplateApp
  - opts:
      is_expand: false
    IOS_BUNDLE_ID: com.tandf.app.template
  - opts:
      is_expand: false
    APPLE_DEVELOPER_TEAM_ID: 26ZS98S6V5
  - opts:
      is_expand: false
    ANDROID_PACKAGE_NAME: com.tandf.app.template